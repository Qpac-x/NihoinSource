#pragma once

/* <-- Core Includes --> */
#include <Windows.h>
#include <WinSock2.h>
#include <iostream>
#include <string>
#include <format>

/* <-- Third Party Includes --> */
#include <Config/Config.hpp>
#include <Exploit/Execution/Execution.hpp>

class Bridge {
public:
	static auto createPipe(std::string PipeName) -> void {
		auto execution{ Execution::getSingleton() };

		DWORD Read{};
		char BufferSize[999999];
		std::string
			Name = ("\\\\.\\pipe\\local\\" + PipeName),
			Script{};
		HANDLE Pipe = CreateNamedPipeA(Name.c_str(),
			PIPE_ACCESS_DUPLEX | PIPE_TYPE_BYTE | PIPE_READMODE_BYTE, PIPE_WAIT, 1,
			9999999, 9999999, NMPWAIT_USE_DEFAULT_WAIT, nullptr);

		if (Config::UseConsole)
			std::printf("  Created Pipe\n");

		while (Pipe != INVALID_HANDLE_VALUE) {
			if (ConnectNamedPipe(Pipe, nullptr) != FALSE) {
				while (ReadFile(Pipe, BufferSize, sizeof(BufferSize) - 1, &Read, nullptr) != FALSE) {
					BufferSize[Read] = '\0';
					Script += BufferSize;
				}
				
				execution->executeScript(Script);
				Script.clear();
			}
			DisconnectNamedPipe(Pipe);
		}
	}

	static auto createSocket(int port) -> void {
		auto execution { Execution::getSingleton() };

		WSADATA WsaData;
		WSAStartup(MAKEWORD(2, 2), &WsaData);

		SOCKET Socket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
		SOCKADDR_IN SockAddr;
		SockAddr.sin_family = AF_INET;
		SockAddr.sin_port = htons(port);
		SockAddr.sin_addr.s_addr = htonl(INADDR_ANY);

		bind(Socket, reinterpret_cast<SOCKADDR*>(&SockAddr), sizeof(SockAddr));
		listen(Socket, SOMAXCONN);

		SOCKET ClientSocket = accept(Socket, nullptr, nullptr);

		char Buffer[999999];
		std::string Script{};

		while (true) {
			recv(ClientSocket, Buffer, sizeof(Buffer), 0);
			Script += Buffer;

			execution->executeScript(Script);
			Script.clear();
		}
		
		closesocket(Socket);
		WSACleanup();
	}

	static auto getSingleton() -> Bridge* {
		return new Bridge();
	}
};