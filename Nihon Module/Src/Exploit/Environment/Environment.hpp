#pragma once

/* <-- Core Includes --> */
#include <Windows.h>
#include <thread>
#include <format>
#include <filesystem>
#include <tlhelp32.h>
#include <shlwapi.h>

/* <-- Third Party Includes --> */
#include <Config/Config.hpp>
#include <Dependencies/HttpStatus.hpp>
#include <Exploit/Execution/Execution.hpp>
#include <cpr/cpr.h>
#include <cpr/cookies.h>
#include <lgc.h>
#include <aes.h>
#include <rsa.h>
#include <gcm.h>
#include <eax.h>
#include <md2.h>
#include <md5.h>
#include <sha.h>
#include <sha3.h>
#include <osrng.h>
#include <hex.h>
#include <pssr.h>
#include <base64.h>
#include <modes.h>
#include <filters.h>
#include <serpent.h>
#include <pwdbased.h>
#include <blowfish.h>
#include <modes.h>

/* <-- Defines --> */
#define CRYPTOPP_ENABLE_NAMESPACE_WEAK 1
#define ARG_CHECK(L, MIN, MAX, T) if (lua_gettop(L) < MIN) { T return 0; } else if (lua_gettop(L) > MAX) { lua_settop(L, MAX); } T
#define DEREFERENCEPOINTER(ptr) (*(std::intptr_t*)ptr)

class Environment {
private:
	static Environment* singleton;
public:
	static auto getSingleton() -> Environment*;
	auto Register(lua_State* L) -> void;
};